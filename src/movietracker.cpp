

#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <stdio.h>
#include <iostream>
#include <sys/time.h>
#include <unistd.h>
#include <sstream>
#include <stdlib.h>
#include <inttypes.h>
#include <glob.h>
#include <vector>
#include <fcntl.h>
#include <linux/kd.h>
#include <sys/ioctl.h>
#include <boost/algorithm/string.hpp> // include Boost, a C++ library
#include <sys/stat.h>
#include <sys/types.h>
#include <utime.h>
#include <stdlib.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <syslog.h>


#include <fstream>
#include <iomanip>
#include <unistd.h>
#include <cstdio>
#include <errno.h>
#include <linux/videodev2.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <unistd.h>

#include <vector>
#include <stdio.h>



//openCV
#include <opencv2/opencv.hpp>
#include <opencv/cv.hpp>
#include <opencv2/videoio.hpp>
#include "opencv2/imgcodecs.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/core/core.hpp"


#include <iostream>
#include <stdio.h>
#include <stdlib.h>


#include "cgicc/Cgicc.h"
#include "cgicc/HTTPHTMLHeader.h"
#include "cgicc/HTMLClasses.h"

#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/foreach.hpp>

using namespace std;
using namespace cgicc;
using namespace cv;
using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;



const Scalar SCALAR_BLACK = Scalar(0.0,0.0,0.0);
const Scalar SCALAR_WHITE = Scalar(255.0,255.0,255.0);
const Scalar SCALAR_BLUE = Scalar(255.0,0.0,0.0);
const Scalar SCALAR_GREEN = Scalar(0.0,255.0,0.0);
const Scalar SCALAR_RED = Scalar(0.0,0.0,255.0);



// Global variables
Mat myframe; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard
void help();
void processVideo(char* videoFilename, float learningrate);
void processImages(char* firstFrameFilename);

int main(int argc, char* argv[])
{

    //check for the input parameter correctness
    if(argc != 4) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }
    //create GUI windows
    //namedWindow("Frame");
  //  namedWindow("FG Mask MOG 2");
   // namedWindow("Simple Ass BS");
	
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorKNN(); //MOG2 approach

			
    if(strcmp(argv[1], "-vid") == 0) {
        //input data coming from a video
        processVideo(argv[2], atof(argv[3]));
    }
    else if(strcmp(argv[1], "-img") == 0) {
        //input data coming from a sequence of images
        processImages(argv[2]);
    }
    else {
        //error in reading input parameters
        cerr <<"Please, check the input parameters." << endl;
        cerr <<"Exiting..." << endl;
        return EXIT_FAILURE;
    }
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}
void processVideo(char* videoFilename, float learningrate) {
    //create the capture object
    VideoCapture capture(videoFilename);

//create traces
	Mat deathmask;
	Mat arnold; 
	bool firstframe=true;


    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video file: " << videoFilename << endl;
        exit(EXIT_FAILURE);
    }
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //read the current frame
        if(!capture.read(myframe)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }


	


        //update the background model
      //  pMOG2->apply(myframe, fgMaskMOG2,learningrate);
        //get the frame number and write it on the current frame
        stringstream ss;
      
        //show the current frame and the fg masks
        //imshow("Frame", myframe);
       // imshow("FG Mask MOG 2", fgMaskMOG2);


	//make the background mask
	Mat canny_output;
	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;
	blur( myframe, myframe, Size(5,5) );						
	Canny( myframe, canny_output, 80, 180, 3 );
	findContours( canny_output, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE, Point(0, 0) );
	Mat drawing = (Mat::zeros( canny_output.size(), CV_8UC1 ));
	


	for( size_t j = 0; j< contours.size(); j++ )
		 {
		  
		   Scalar color = SCALAR_WHITE;
		   drawContours( drawing, contours, (int)j, color, 1, 8, hierarchy, 0, Point() );


		 }

	if (firstframe) {
		deathmask = drawing.clone();
		arnold= drawing.clone();
		firstframe=false;
	}

	drawing = drawing - deathmask;
	arnold = arnold + drawing;
	Mat black = (Mat::zeros( myframe.size(), CV_8UC1 ));//set green to black

	Mat coloroutput = (Mat::zeros(canny_output.size(),CV_8UC3));
	vector<Mat>  compchannels(3);
	compchannels.at(0) = arnold;
	compchannels.at(1) =   deathmask;
	compchannels.at(2) = drawing;
	merge(compchannels,coloroutput);


	//imshow("Simple Ass BS", coloroutput);
	imwrite("lastimage.png",coloroutput);
        //get the input from the keyboard
        //keyboard = waitKey( 1 );
    }
    //delete capture object
    capture.release();
}
void processImages(char* fistFrameFilename) {
    //read the first file of the sequence
    myframe = imread(fistFrameFilename);
    if(myframe.empty()){
        //error in opening the first image
        cerr << "Unable to open first image frame: " << fistFrameFilename << endl;
        exit(EXIT_FAILURE);
    }
    //current image filename
    string fn(fistFrameFilename);
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //update the background model
        pMOG2->apply(myframe, fgMaskMOG2);
        //get the frame number and write it on the current frame
        size_t index = fn.find_last_of("/");
        if(index == string::npos) {
            index = fn.find_last_of("\\");
        }
        size_t index2 = fn.find_last_of(".");
        string prefix = fn.substr(0,index+1);
        string suffix = fn.substr(index2);
        string frameNumberString = fn.substr(index+1, index2-index-1);
        istringstream iss(frameNumberString);
        int frameNumber = 0;
        iss >> frameNumber;
        rectangle(myframe, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        putText(myframe, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        //show the current frame and the fg masks
        imshow("Frame", myframe);
        imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
        keyboard = waitKey( 30 );
        //search for the next image in the sequence
        ostringstream oss;
        oss << (frameNumber + 1);
        string nextFrameNumberString = oss.str();
        string nextFrameFilename = prefix + nextFrameNumberString + suffix;
        //read the next frame
        myframe = imread(nextFrameFilename);
        if(myframe.empty()){
            //error in opening the next image in the sequence
            cerr << "Unable to open image frame: " << nextFrameFilename << endl;
            exit(EXIT_FAILURE);
        }
        //update the path of the current frame
        fn.assign(nextFrameFilename);
    }
}

